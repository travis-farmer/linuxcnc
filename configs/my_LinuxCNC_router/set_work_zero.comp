/********************************************************************************
Serial communications with a userspace component

Had problems with a global variable int fd to hold the file descriptor
I had the serial init code called from the EXTRA_SETUP macro and the
cleanup code called from the EXTRA_CLEANUP macro

Everything compiled fine and did not error when running
However it printed the strings to the terminal instead of sending them to /dev/ttyUSB0
Run a a commandline app it worked perfectly.

Appears the global was volatile in this generated component set up,
the main loop was not reading the original value
As 0, 1, and 2 are all pre-set values for stdin-out-err looks like value ended up as
1 or 2 and wrote out to tty

Putting everything in main code and passing fd explicitly works fine.

*********************************************************************************/

component set_work_zero                 "This component...";

pin in float xselect              "Receives current position from Xpos";
pin in float yselect              "Receives current position from Ypos";
pin in float zselect              "Receives current position from Zpos";
pin in float button_press         "reads one pendent button";

option singleton yes;               // makes no sense to have more than one of these components running
option userspace yes;

author "Travis Farmer travis@tjfhome.ddns.net";
license "GPL";
;;

#include <stdio.h>    /* Standard input/output definitions */
#include <stdlib.h>
#include <stdint.h>   /* Standard types */
#include <string.h>   /* String function definitions */
#include <unistd.h>   /* UNIX standard function definitions */
#include <fcntl.h>    /* File control definitions */
#include <errno.h>    /* Error number definitions */
#include <termios.h>  /* POSIX terminal control definitions */
#include <sys/ioctl.h>

#define _POSIX_SOURCE 1 /* POSIX compliant source */

    // predefs of later functions
void sendCommand(char);

void user_mainloop(void)
{
  while (1)
  {
    if (xselect == 1 && button_press == 1)
    {
      sendCommand('X');
    } else if (yselect == 1 && button_press == 1)
    {
      sendCommand('Y');
    } else if (zselect == 1 && button_press == 1)
    {
      sendCommand('Z');
    }
  }

  exit(0);
}

//###################################################################################

void sendCommand(char ch)
{

char cmdbuff[50];

    switch(ch)
        {
        case 'X':
                system("halcmd setp halui.mdi-command-01 1");
                break;
        case 'Y':
                system("halcmd setp halui.mdi-command-02 1");
                break;
        case 'Z':
                system("halcmd setp halui.mdi-command-03 1");
                break;
        default:
                break;
        }

}



