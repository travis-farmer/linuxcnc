/********************************************************************************
serialcon.comp

Serial communications with a userspace component

*********************************************************************************/

component serialcon                 "This component services the arduino pendant";

pin in float xposition              "Receives current position from Xpos";
pin in float yposition              "Receives current position from Ypos";
pin in float zposition              "Receives current position from Zpos";
pin out float volts_five.# [1] """5v Bus""";
pin out float volts_twelve.# [1] """12v Bus""";
pin out float volts_twentyfour.# [1] """24v Bus""";
pin out float volts_stepper.# [1] """Stepper Bus""";
pin out bit fault.# [1]  "Fault condition detected.";
pin out unsigned fault_flags.# [1]  "Fault flags: 0x1  = power failure, 0x2 unknown, 0x3 unknown.";

option singleton yes;               // makes no sense to have more than one of these components running
option userspace yes;

author "ArcEye";
license "GPL";
;;

#include <stdio.h>    /* Standard input/output definitions */
#include <stdlib.h>
#include <stdint.h>   /* Standard types */
#include <string.h>   /* String function definitions */
#include <unistd.h>   /* UNIX standard function definitions */
#include <fcntl.h>    /* File control definitions */
#include <errno.h>    /* Error number definitions */
#include <termios.h>  /* POSIX terminal control definitions */
#include <sys/ioctl.h>

#define BAUDRATE B9600
#define DEVICE "/dev/ttyUSB0"
#define _POSIX_SOURCE 1 /* POSIX compliant source */

    // predefs of later functions
void sendCommand(char);
int serialport_init();

struct termios toptions;;       // port setup

void user_mainloop(void)
{
char buffer[50];
char oldbuffer[50];
char ch;



int fd = serialport_init();
//    bzero(oldbuffer, 50);
    while(fd != -1)
        {
            //  approx 1/4 sec appears to be optimum period for a steady display with min lag
            //  may differ on another system with different thread speeds
        usleep(250000);
            // ************************************************************************************
            // IT DOESN'T MATTER IF THERE ARE NO OTHER INSTANCES ie SINGLETON, MUST USE THIS MACRO
            // In this case, if you don't, no data gets written
            // ************************************************************************************
        FOR_ALL_INSTS()
            {
            // %08.03f = 8 digit including decimal point and sign, leading zeros & 3 digit precision with trailing zeros
            bzero(buffer, 50);
            sprintf(buffer, "X%08.03f\nY%08.03f\nZ%08.03f\n", xposition, yposition, zposition );
}
//            if(strcmp(oldbuffer, buffer) != 0)
            write(fd, buffer, sizeof(buffer));
//            strcpy(oldbuffer, buffer);
            if(read(fd,&ch,1) == 1)  // if command byte read from arduino
                sendCommand(ch);
            }
        }

    close(fd);
    exit(0);
}

//######################################################################

int serialport_init()
{
int fd;

    fd = open(DEVICE, O_RDWR | O_NOCTTY | O_NDELAY);
    if (fd == -1)
        {
        perror("init_serialport: Unable to open port ");
        return -1;
        }

    if (tcgetattr(fd, &toptions) < 0)
        {
        perror("init_serialport: Couldn't get term attributes");
        return -1;
        }
    speed_t brate = BAUDRATE;
    cfsetispeed(&toptions, brate);
    cfsetospeed(&toptions, brate);
    // 8N1
    toptions.c_cflag &= ~PARENB;
    toptions.c_cflag &= ~CSTOPB;
    toptions.c_cflag &= ~CSIZE;
    toptions.c_cflag |= CS8;
    // no flow control
    toptions.c_cflag &= ~CRTSCTS;

    toptions.c_cflag |= CREAD | CLOCAL;  // turn on READ & ignore ctrl lines
    toptions.c_iflag &= ~(IXON | IXOFF | IXANY); // turn off s/w flow ctrl

    toptions.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG); // make raw
    toptions.c_oflag &= ~OPOST; // make raw

    // see: http://unixwiz.net/techtips/termios-vmin-vtime.html
    toptions.c_cc[VMIN]  = 0;
    toptions.c_cc[VTIME] = 20;

    if( tcsetattr(fd, TCSANOW, &toptions) < 0)
        {
        perror("init_serialport: Couldn't set term attributes");
        return -1;
        }
    return fd;
}




//###################################################################################
    // want these 2 to persist between calls
char selected_axis = '0';
int bJogging = false;
char Addr = 0x00;
double Data = 0.00;
char inData[15];
int CmdPos = 0;
void sendCommand(char ch)
{

    char cmdbuff[50];

    if (ch != '\n' || ch != '\r') {
        CmdPos = 0;
        Data = atof(inData);
        switch(Addr) {
          case 'x':
            if (Data == 1.00) {
              fault(0) = 1;
            } else {
              fault(0) = 0;
            }
            break;
          case 'a':
            volts_five(0) = Data;
            break;
          case 'b':
            volts_twelve(0) = Data;
            break;
          case 'c':
            volts_twentyfour(0) = Data;
            break;
          case 'd':
            volts_stepper(0) = Data;
            break;

        }
    }
    else if (CmdPos = 0) {Addr = ch; CmdPos++;}
    else if (CmdPos > 0) {inData[CmdPos-1] = ch;}


}
