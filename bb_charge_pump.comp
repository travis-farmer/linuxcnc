/********************************************************************************
bb_charge_pump.comp

Serial communications with a userspace component

*********************************************************************************/

component bb_charge_pump                 "This component services the BitBang Charge Pump";

pin in bit enable              "if low, start pump";
pin out bit pump.# [2]  "Pump Outputs.";


option singleton yes;               // makes no sense to have more than one of these components running
option userspace yes;

author "Travis Farmer";
license "GPL";
;;

#include <stdio.h>    /* Standard input/output definitions */
#include <stdlib.h>
#include <stdint.h>   /* Standard types */
#include <string.h>   /* String function definitions */
#include <unistd.h>   /* UNIX standard function definitions */
#include <errno.h>    /* Error number definitions */
#include <sys/ioctl.h>
#include <inttypes.h>
#include <math.h>
#include <time.h>

unsigned long time_with_ms (void)
{
    unsigned long            ms; // Milliseconds
    time_t          s;  // Seconds
    struct timespec spec;

    clock_gettime(CLOCK_REALTIME, &spec);

    s  = spec.tv_sec;
    ms = (spec.tv_nsec / 1.0e6); // Convert nanoseconds to milliseconds
    if (ms > 999) {
        s++;
        ms = 0;
    }

    return(ms);
}

void user_mainloop(void)
{
    bool PumpState = false;
    unsigned long lastTimer = 0UL;
    while(true)
        {


            // ************************************************************************************
            // IT DOESN'T MATTER IF THERE ARE NO OTHER INSTANCES ie SINGLETON, MUST USE THIS MACRO
            // In this case, if you don't, no data gets written
            // ************************************************************************************
        FOR_ALL_INSTS()
        {
            if (enable == 0) {
                unsigned long curTime = time_with_ms();
                      if (curTime - lastTimer >= 250) {
                    lastTimer = curTime;
                    if (PumpState == true) {
                        PumpState = false;
                        pump(0) = 1;
                        pump(1) = 0;
                    } else {
                        PumpState = true;
                        pump(0) = 0;
                        pump(1) = 1;
                    }
                      }
            } else {
                pump(0) = 0;
                pump(1) = 0;
            }
        }
    }
    exit(0);
}
