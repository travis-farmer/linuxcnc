component MacSafety "manage safety interlocks, and display signal tower";

pin out bit InterlockOut "true when machine is safe";
pin out bit SigRed "Red signal output";
pin out bit SigYellow "Yellow signal output";
pin out bit SigGreen "Green signal output";
pin out bit SigBlue "Blue signal output";
pin out bit SigWhite "White signal output";
pin out bit SigBuzzer "Buzzer signal output";
pin out bit DoorUnlockOut "True when machine is safe to open, and door button pressed";
pin out bit SendEstop "true when sending ESTOP";
pin in bit ProgPausedIn "halui.program.is-paused connection";
pin in bit ProgRunningIn "halui.program.is-running connection";
pin in bit ProgIdleIn "halui.program.is-idle connection";
pin in bit DoorInterlockIn "input from door interlock, true when safe";
pin in bit DoorUnlockButtonIn "input from door unlock button";
pin in bit LaserRunningIn "input from laser enable";
pin in bit EstopIn "input from ESTOP";
pin in bit TrigEstop "alternate ESTOP trigger";

function _;
license "GPL";
author "Travis Farmer";
;;

void signalRed() { // Failure conditions such as an emergency stop or machine fault
    SigRed = true;
    SigYellow = false;
    SigGreen = false;
}

void signalYellow() { // Warnings such as over-temperature or over-pressure conditions
    SigRed = false;
    SigYellow = true;
    SigGreen = false;
}

void signalGreen() { // Normal machine or process operation
    SigRed = false;
    SigYellow = false;
    SigGreen = true;
}

void signalBlue(bool value) { // Laser active
    if (value == true) {
        SigBlue = true;
    } else {
        SigBlue = false;
    }
}

void signalWhite(bool value) { // Machine running a program
    if (value == true) {
        SigWhite = true;
    } else {
        SigWhite = false;
    }
}

void signalBuzzer(bool value) {
    if (value == true) {
        SigBuzzer = true;
    } else {
        SigBuzzer = false;
    }
}



FUNCTION(_) {
    // InterlockOut and DoorUnlockOut proc
    if (ProgRunningIn == true && DoorInterlockIn == true && ProgPausedIn == false && EstopIn == false) {
        InterlockOut = true;
        if (DoorUnlockButtonIn == true) {signalBuzzer(true);}
        else {signalBuzzer(false);}
        SendEstop = false;
    } else if (ProgPausedIn == true || ProgIdleIn == true && EstopIn == false) {
        InterlockOut = false;
        signalBuzzer(false);
        if (DoorUnlockButtonIn == true) {DoorUnlockOut = true;}
        else {DoorUnlockOut = false;}
        SendEstop = false;
    } else if ((ProgRunningIn == true && DoorInterlockIn == false && ProgPausedIn == false && EstopIn == false) || TrigEstop == true) {
        InterlockOut = false;
        signalBuzzer(true);
        SendEstop = true;
    }

    // Signal Lights Proc
    if (ProgRunningIn == true && ProgPausedIn == false && LaserRunningIn == false && EstopIn == false) {
        signalGreen();
        signalWhite(true);
        signalBlue(false);
        }
    } else if (ProgPausedIn == true && DoorInterlockIn == false && EstopIn == false) {
        signalGreen();
        signalWhite(false);
        signalBlue(false);
    } else if (ProgRunningIn == false && ProgIdleIn == true && EstopIn == false) {
        signalGreen();
        signalWhite(false);
        signalBlue(false);
    } else if (ProgRunningIn == true && ProgPausedIn == false && LaserRunningIn == true && EstopIn == false) {
        signalGreen();
        signalBlue(true);
        signalWhite(false);
    } else if (EstopIn == true) {
        signalRed();
        signalBlue(false);
        signalWhite(false);

    }
}
