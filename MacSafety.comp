component MacSafety "manage safety interlocks, and display signal tower";

pin out bit SignalTowerRed "Signal Tower RED output";
pin out bit SignalTowerAmber "Signal Tower Amber output";
pin out bit SignalTowerGreen "Signal Tower Green output";
pin out bit SignalTowerWhite "Signal Tower WHite output";
pin out bit SignalTowerBlue "Signal Tower Blue output";
pin out bit SignalTowerBuzzer "Signal Tower Buzzer output";
pin out bit SignalTowerBuzzernot "NOT Signal tower buzzer output";
pin out bit EstopOut "trigger Estop output";
pin out bit ATCairSafe "ATC Air in safe range";
pin in bit ProgPausedIn "halui.program.is-paused connection";
pin in bit ProgRunningIn "halui.program.is-running connection";
pin in bit ProgIdleIn "halui.program.is-idle connection";
pin in bit EstopIn "input from ESTOP";
pin in bit LaserMode "input from laser mode switch";
pin in bit NGCwarning "input from NGC warning";
pin in bit ManualChangeWaiting "Waiting for manual tool change";
pin in bit ATCActive "ATC is ACTIVE LED";
pin in float ATCair "ATC Air input";
pin in float ATCairTrigger "ATC less than air trigger";
pin in float ATCairEstop "ATC Air is less than Estop trigger level";
pin in float SpindTemp "Spindle temperature";
pin in float SpindTempTrigger "Spindle greater than Temp Trigger";
pin in float SpindTempEstop "Spindle temp greater than Estop trigger level";
pin in float SpindHP "Spindle HP input";
pin in float SpindHPtrigger "Spindle greater than HP trigger";
pin in float SpindHpEstop "Spindle HP greater than Estop trigger level";

function _;
license "GPL";
author "Travis Farmer";
;;

#include <stdio.h>    /* Standard input/output definitions */
#include <stdlib.h>
#include <stdint.h>   /* Standard types */
#include <string.h>   /* String function definitions */
#include <unistd.h>   /* UNIX standard function definitions */
#include <errno.h>    /* Error number definitions */
#include <sys/ioctl.h>
#include <inttypes.h>
#include <math.h>
#include <time.h>

FUNCTION(_) {
	bool EstopFired = false;
	
    // status LED Tower - red, amber, green, blue, white, buzzer
    if (EstopIn == true || (ATCair <= ATCairEstop || SpindTemp >= SpindTempEstop || SpindHP >= SpindHpEstop)) {
        SignalTowerGreen = false;
        SignalTowerAmber = false;
        SignalTowerRed = true;
        SignalTowerBuzzer = true;
        SignalTowerBuzzernot = false;
        if (EstopOut == false && EstopFired == false) {
            EstopOut = false;

            EstopFired = true;
        }
    } else if (ProgPausedIn == true || (ATCair <= ATCairTrigger || SpindTemp >= SpindTempTrigger || SpindHP >= SpindHPtrigger || NGCwarning == true)) {
        SignalTowerGreen = false;
        SignalTowerAmber = true;
        SignalTowerRed = false;
        SignalTowerBuzzer = true;
        SignalTowerBuzzernot = true;
    } else if (ProgRunningIn == true) {
        SignalTowerGreen = true;
        SignalTowerAmber = false;
        SignalTowerRed = false;
        SignalTowerBuzzer = false;
        SignalTowerBuzzernot = true;
    } else {
        SignalTowerGreen = false;
        SignalTowerAmber = false;
        SignalTowerRed = false;
        SignalTowerBuzzer = false;
        SignalTowerBuzzernot = true;
    }
    if (ATCActive == true) {
        SignalTowerWhite = true;
    } else {
        SignalTowerWhite = false;
    }
    if (ManualChangeWaiting == true) {
        SignalTowerBlue = true;
    } else {
        SignalTowerBlue = false;
    }
    if (EstopFired == true && (ATCair > ATCairEstop || SpindTemp < SpindTempEstop || SpindHP < SpindHpEstop)) {
        EstopOut = true;
        EstopFired = false;
    }
    if (ATCair > ATCairTrigger) {
        ATCairSafe = true;
    } else {
        ATCairSafe = false;
    }
}
