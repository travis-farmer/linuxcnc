component MacSafety "manage safety interlocks, and display signal tower";

pin out bit InterlockOut "true when machine is safe";
pin out bit DoorUnlockOut "True when machine is safe to open, and door button pressed";
pin out bit SignalTowerRed "Signal Tower RED output";
pin out bit SignalTowerAmber "Signal Tower Amber output";
pin out bit SignalTowerGreen "Signal Tower Green output";
pin out bit SignalTowerWhite "Signal Tower WHite output";
pin out bit SignalTowerBlue "Signal Tower Blue output";
pin out bit SignalTowerBuzzer "Signal Tower Buzzer output";
pin out bit EstopOut "trigger Estop output";
pin in bit ProgPausedIn "halui.program.is-paused connection";
pin in bit ProgRunningIn "halui.program.is-running connection";
pin in bit ProgIdleIn "halui.program.is-idle connection";
pin in bit DoorInterlockIn "input from door interlock, true when safe";
pin in bit DoorUnlockButtonIn "input from door unlock button";
pin in bit EstopIn "input from ESTOP";
pin in bit LaserMode "input from laser mode switch";
pin in bit ManualChangeWaiting "Waiting for manual tool change";
pin in bit LaserActive "Laser is ACTIVE LED";
pin in float ATCair "ATC Air input";
pin in float ATCairTrigger "ATC less than air trigger";
pin in float SpindTemp "Spindle temperature";
pin in float SpindTempTrigger "Spindle greater than Temp Trigger";
pin in float SpindTempEstop "Spindle temp greater than Estop trigger level";
pin in float SpindHP "Spindle HP input";
pin in float SpindHPtrigger "Spindle greater than HP trigger";
pin in float SpindHpEstop "Spindle HP greater than Estop trigger level";

function _;
license "GPL";
author "Travis Farmer";
;;

#include <stdio.h>    /* Standard input/output definitions */
#include <stdlib.h>
#include <stdint.h>   /* Standard types */
#include <string.h>   /* String function definitions */
#include <unistd.h>   /* UNIX standard function definitions */
#include <errno.h>    /* Error number definitions */
#include <sys/ioctl.h>
#include <inttypes.h>
#include <math.h>
#include <time.h>

unsigned long lastTimer = 0UL;
bool BuzzerState = false;
bool BuzzerFired = false;
bool EstopFired = false;

unsigned long time_with_ms (void)
{
    unsigned long            ms; // Milliseconds
    time_t          s;  // Seconds
    struct timespec spec;

    clock_gettime(CLOCK_REALTIME, &spec);

    s  = spec.tv_sec;
    ms = (spec.tv_nsec / 1.0e6); // Convert nanoseconds to milliseconds
    if (ms > 4294967295) {
        ms = 0;
    }
    return(ms);
}

bool TriggerWarning(void) {
    if (ATCair <= ATCairTrigger || SpindTemp >= SpindTempTrigger || SpindHP >= SpindHPtrigger) {
        return true;
    } else {
        return false;
    }
}

bool TriggerEstop(void) {
    if (SpindTemp >= SpindTempEstop || SpindHP >= SpindHpEstop) {
        return true;
    } else {
        return false;
    }
}

FUNCTION(_) {
    // if state active, buzzer for 2500ms
    if (BuzzerState == true) {
        unsigned long curTime = time_with_ms();
        if (curTime - lastTimer >= 2500) {
            lastTimer = 0UL;
            BuzzerState = false;
            SignalTowerBuzzer = false;
        } else {
            SignalTowerBuzzer = true;
            BuzzerFired = true;
        }
    }

    // InterlockOut and DoorUnlockOut proc
    if (ProgRunningIn == true && DoorInterlockIn == true && ProgPausedIn == false && LaserMode == true) {
        InterlockOut = true;
    } else if (ProgPausedIn == true || ProgIdleIn == true) {
        InterlockOut = false;
        if (DoorUnlockButtonIn == true) {DoorUnlockOut = true;}
        else {DoorUnlockOut = false;}
    } else if (ProgRunningIn == true && DoorInterlockIn == false && ProgPausedIn == false && LaserMode == true) {
        InterlockOut = false;
    }

    // status LED Tower - red, amber, green, blue, white, buzzer
    if (EstopIn == true || TriggerEstop() == true) {
        SignalTowerGreen = false;
        SignalTowerAmber = false;
        SignalTowerRed = true;
        if (BuzzerFired == false) {
            BuzzerState = true;
        }
        if (EstopIn == false && EstopFired == false) {
            EstopOut = false;
            EstopFired = true;
        }
    } else if (ProgPausedIn == true || TriggerWarning() == true) {
        SignalTowerGreen = false;
        SignalTowerAmber = true;
        SignalTowerRed = false;
        BuzzerState = false;
        BuzzerFired = false;
    } else if (ProgRunningIn == true) {
        SignalTowerGreen = true;
        SignalTowerAmber = false;
        SignalTowerRed = false;
        BuzzerState = false;
        BuzzerFired = false;
    } else {
        SignalTowerGreen = false;
        SignalTowerAmber = false;
        SignalTowerRed = false;
        BuzzerState = false;
        BuzzerFired = false;
    }
    if (LaserActive == true) {
        SignalTowerWhite = true;
    } else {
        SignalTowerWhite = false;
    }
    if (ManualChangeWaiting == true) {
        SignalTowerBlue = true;
    } else {
        SignalTowerBlue = false;
    }
    if (EstopFired == true && TriggerEstop == false) {
        EstopOut = true;
        EstopFired = false;
    }
}
